// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkRevoke = `-- name: CheckRevoke :one
SELECT revoked_at FROM refresh_tokens WHERE token=$1
`

func (q *Queries) CheckRevoke(ctx context.Context, token string) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, checkRevoke, token)
	var revoked_at sql.NullTime
	err := row.Scan(&revoked_at)
	return revoked_at, err
}

const newRefresh = `-- name: NewRefresh :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES ($1, NOW(), NOW(), $2, $3)
`

type NewRefreshParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) NewRefresh(ctx context.Context, arg NewRefreshParams) error {
	_, err := q.db.ExecContext(ctx, newRefresh, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const revokeRefresh = `-- name: RevokeRefresh :exec
UPDATE refresh_tokens SET updated_at=NOW(), revoked_at=NOW() WHERE token=$1
`

func (q *Queries) RevokeRefresh(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefresh, token)
	return err
}

const updateRefresh = `-- name: UpdateRefresh :one
UPDATE refresh_tokens SET updated_at=NOW(), expires_at=$2 WHERE token=$1 RETURNING user_id
`

type UpdateRefreshParams struct {
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) UpdateRefresh(ctx context.Context, arg UpdateRefreshParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateRefresh, arg.Token, arg.ExpiresAt)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
